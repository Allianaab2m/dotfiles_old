[[plugins]]
repo='vim-airline/vim-airline'
hook_add='''
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline#extensions#tabline#right_sep=''
  let g:airline#extensions#tabline#left_sep=''
  let g:airline#extensions#tabline#buffer_idx_mode=1
  let g:airline#extensions#tabline#buffer_idx_format = {
    	\ '0': '0 ',
    	\ '1': '1 ',
    	\ '2': '2 ',
    	\ '3': '3 ',
    	\ '4': '4 ',
    	\ '5': '5 ',
    	\ '6': '6 ',
    	\ '7': '7 ',
    	\ '8': '8 ',
    	\ '9': '9 '
    	\}
  let g:airline_mode_map = {
    	\ 'n'  : 'Normal',
    	\ 'i'  : 'Insert',
    	\ 'R'  : 'Replace',
    	\ 'c'  : 'Command',
    	\ 'v'  : 'Visual',
    	\ 'V'  : 'V-Line',
    	\ '⌃V' : 'V-Block',
    	\ }
  nmap <C-p> <Plug>AirlineSelectPrevTab
  nmap <C-n> <Plug>AirlineSelectNextTab

  let g:airline#extensions#default#layout = [
    \ ['a', 'b', 'c'],
    \ ['x', 'y', 'z']
    \ ]

" Requirements
" * vim-airline
" * playerctl installed on host system
" Installation
" Place this code in your vimrc or .config/nvim/init.vim

" Metadata from playerctl
function g:PlayerctlMetadata ()
   :silent let l  = system("playerctl metadata --format='{{ title }} - {{ artist }}'")

   if l =~ 'Connection to player failed: .*'
        return "No Music"
   endif
   return l
endfunction

" Checks if the timer has ended and if so updates the metadata in vim airline
" this is for performance reasons only because shell commands take relatively long 
" and they don't happen asynchriously so we can't execute them as frequent as we would like
function g:TimedPlayerctlMetadata()
   if g:TimedPlayerCtl == "ready"
      let l = g:PlayerctlMetadata()
      let g:PlayerctlBuf = l
      let g:TimedPlayerCtl = "paused"
   else
      let l = g:PlayerctlBuf
   end
   return l
endfunction

" Sets the status the vim airline as ready; is used to signal the TimedPlayerctlMetadata
" function that it is allowed to update the status in vim airline
function g:EnableTimedPlayerCtlMetadata(...)
   let g:TimedPlayerCtl = "ready"
endfunction

" Plays the next song through playerctl
function g:PlayerctlNext()
   :silent let l = system("playerctl next")
endfunction

function g:PlayerctlPlay()
   :silent let l = system("playerctl play")
endfunction

" 
function g:PlayerctlPause()
   :silent let l = system("playerctl pause")
endfunction

" Plays the previous song through playerctl
function g:PlayerctlPrev()
   :silent let l = system("playerctl previous")
endfunction

" Call this through a timer if the status doesn't seem to update in vim airline
function g:PlayerCtlUpdate()
   call airline#update_statusline()
endfunction

" Initiates the vim airline status
function g:PlayerctlAirline(...)
   if !exists("g:loaded_vim_airline_playerctl")
      let g:PlayerctlBuf = "No Music"
      let g:TimedPlayerCtl = "ready"
      let g:airline_section_z .= " ".g:airline_left_alt_sep." ".airline#section#create_right(['♫ %{g:TimedPlayerctlMetadata()}'])
      let g:loaded_vim_airline_playerctl = 1
   endif
endfunction

call airline#add_statusline_func("g:PlayerctlAirline")

" Playerctl commands for controlling spotify etal
command Pnext call g:PlayerctlNext()
command Ppause call g:PlayerctlPause()
command Pplay call g:PlayerctlPlay()
command Pprev call g:PlayerctlPrev()

" playerctl metadata in airline
call timer_start(500, "g:EnableTimedPlayerCtlMetadata", {"repeat": -1})

'''

[[plugins]]
repo='vim-airline/vim-airline-themes'

[[plugins]]
repo='lambdalisue/fern.vim'
hook_add='''
  nnoremap <silent> <C-n> :<C-u>Fern . -drawer<CR>
  nnoremap <silent> <C-N> :<C-u>Fern . -drawer -reveal=%<CR>
'''

[[plugins]]
repo='lambdalisue/fern-git-status.vim'

[[plugins]]
repo='lambdalisue/nerdfont.vim'

[[plugins]]
repo='lambdalisue/fern-renderer-nerdfont.vim'
hook_add='''
  let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo='lambdalisue/glyph-palette.vim'
hook_add='''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree, startify call glyph_palette#apply()
  augroup END
'''

[[plugins]]
repo='airblade/vim-gitgutter'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo='yuki-yano/fuzzy-motion.vim'
hook_add='''
  nmap <Leader>s :<C-u>FuzzyMotion<CR>
'''
[[plugins]]
repo='simeji/winresizer'

[[plugins]]
repo='neoclide/coc.nvim'
rev = 'release'
build='''
  git checkout release
'''
hook_add='''
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getlin('.')[col - 1] =~# '\s'
  endfunction
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
'''

[[plugins]]
repo='junegunn/fzf'
build='''
  ./install --all
'''

[[plugins]]
repo='jdkanani/vim-material-theme'
hook_add='''
  colorscheme material-theme
  highlight Normal ctermbg=NONE guibg=NONE
  highlight NonText ctermbg=NONE guibg=NONE
  highlight SpecialKey ctermbg=NONE guibg=NONE
  highlight EndOfBuffer ctermbg=NONE guibg=NONE
'''

[[plugins]]
repo='andweeb/presence.nvim'
hook_add = '''
  let g:presence_auto_update=1
  let g:presence_editing_text = "Editing %s"
  let g:presence_file_explorer_text = "File browsing"
  let g:presence_neovim_image_text = "お前も\nVimmerにならないか？"
'''

[[plugins]]
repo='twitvim/twitvim'
hook_add='''
  let twitvim_browser_cmd = "firefox"
  let twitvim_force_ssl = 1
  let twitvim_count = 40
'''

[[plugins]]
repo='dart-lang/dart-vim-plugin'

[[plugins]]
repo='thosakwe/vim-flutter'

[[plugins]]
repo='tpope/vim-fugitive'

[[plugins]]
repo='othree/html.vim'

[[plugins]]
repo='pangloss/vim-javascript'

[[plugins]]
repo='evanleck/vim-svelte'

[[plugins]]
repo='nvim-treesitter/nvim-treesitter'
merged=0

[[plugins]]
repo='vim-denops/denops.vim'

[[plugins]]
repo='lambdalisue/gina.vim'

[[plugins]]
repo='machakann/vim-sandwich'

[[plugins]]
repo='higashi000/dps-kakkonan'

[[plugins]]
repo='maguroguma/vim-oj-helper'

[[plugins]]
repo='alaviss/nim.nvim'

[[plugins]]
repo='mhinz/vim-startify'

[[plugins]]
repo='EdenEast/nightfox.nvim'
